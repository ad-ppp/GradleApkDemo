apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.gradle.dividerapkdemo"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // define your base Applications name here
        resValue 'string', 'app_name', 'GradleApkDemo'

        //有需求的同学这里也同样可以增加维度.项目已运用
        flavorDimensions "dimension"
    }

    /**
     * @notice flavor命名首字母必须为小写
     *    这里:不要使用 applicationId this.ext.vatiant.applicationId
     *    release包没问题,但是debug是有问题的.
     */
    productFlavors {
        variant_a {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "dimension"
            applicationIdSuffix ".demo"
            applicationId "com.jacky.variant_a"
            resValue 'string', 'app_name', 'Gradle_A'
        }
        variant_b {
            applicationId "com.jacky.variant_b"
            resValue 'string', 'app_name', 'Gradle_B'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs{
        println "sign config <----"
    }

    applicationVariants.all { variant->
        println "applicationVariants.all; 【${variant.buildType.name}，${variant.flavorName}]"

        variant.outputs.all { output ->

//            if (variant.buildType.name.equals('release')){
//                outputFileName = "${this.ext.vatiant.app}_${variant.flavorName}_V${defaultConfig.versionName}_release.apk"
//            } else if (variant.buildType.name.equals('debug')){
//                outputFileName = "${this.ext.vatiant.app}_${variant.flavorName}_V${defaultConfig.versionName}_debug.apk"
//            }
        }
    }
}

// to test order
println 'build.gradle的配置阶段'

// 创建一个Task 。 一定要注意，配置阶段不仅执行build.gradle中的语句，还包括了 aTask 中的配置语句
task aTask() {
    println 'aTask 中的配置代码'
    // 定义一个闭包
    def a = {
        println 'aTask 中的配置代码2'
    }
    // 执行闭包
    a()
    doFirst {
        println 'aTask doFirst,这段代码配置阶段不执行'
    }
    doLast {
        println 'aTask doLast,这段代码配置阶段不执行'
    }
}

gradle.beforeProject {
    println 'app: beforeProject'
}

tasks.whenTaskAdded { task ->
    android.applicationVariants.all { variant ->
//        println "tasks.whenTaskAdded==> ${variant}"
    }
}

// 动态插入自定义任务，依赖 assemble
task cleanTemp(dependsOn: assemble) {
    doFirst {
        println 'doFirst 清除所有临时文件'
    }
    doLast {
        println 'doLast 清除所有临时文件'
    }
}

afterEvaluate {
    build.dependsOn cleanTemp
}

// 拿到currentFlavor
String taskName = gradle.getStartParameter().getTaskNames()[0]
println "taskName ==>: " + taskName

dependencies {
    println 'start to solve dependencies'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation rootProject.ext.appCompatV7
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // 自动依赖Flavor
//    implementation project(':variants:' + rootProject.ext.currentFlavor)

    println 'end to solve dependencies'
}
