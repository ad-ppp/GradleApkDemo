import java.util.regex.Matcher
import java.util.regex.Pattern

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        
    }
    dependencies {
        println "start execute project buildscript dependencies"

        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
    }
}

println "start execute project gradle"

apply plugin: "com.dorongold.task-tree"

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

final supportLibVersion = "28.0.0"

ext {
    compileSdkVersion = 28
    targetSdkVersion = 28
    minSdkVersion = 19

    supportV4 = "com.android.support:support-v4:${supportLibVersion}"
    appCompatV7 = "com.android.support:appcompat-v7:${supportLibVersion}"
    cardView  = "com.android.support:cardview-v7:${supportLibVersion}"
    designCompat  = "com.android.support:design:${supportLibVersion}"
    supportAnnotitions = "com.android.support:support-annotations:${supportLibVersion}"
    constraintLayout  = "com.android.support.constraint:constraint-layout:1.1.3"

    currentFlavor = getCurrentFlavor()
}

/**
 * 获取当前编译的flavor-name
 * 这里异常情况是会默认返回'beizhong'作为默认的签名路径~可以随便更改
 * @return
 */
def getCurrentFlavor() {
    //定义一个默认指定的flavor用于异常情况下的编译通过
    final defaultFlavor = "variant_a"
    Gradle gradle = getGradle()
    //.getTaskNames()[0]也可以.但Jenkins构建时请使用getTaskRequests
    String taskName = gradle.getStartParameter().getTaskRequests().toString()
    println "taskName : " + taskName
    if (taskName != null) {
        Pattern pattern
        if (taskName.contains("assemble")) {
            if (taskName.contains("Release") || taskName.contains("Debug")) {
                pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
            } else {
                pattern = Pattern.compile("assemble(\\w+)")
            }
        } else {
            if (taskName.contains("Release") || taskName.contains("Debug")) {
                pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
            } else {
                pattern = Pattern.compile("generate(\\w+)")
            }
        }
        Matcher matcher = pattern.matcher(taskName)
        if (matcher.find()) {
            String flavor = matcher.group(1)
            //将task导致的Flavor首字母大写重新转回小写
            char[] c = flavor.toCharArray()
            c[0] = Character.toLowerCase(c[0])
            flavor = new String(c)
            println "currentFlavor:" + flavor
            return flavor
        } else {
            println "currentFlavor:cannot_find_current_flavor"
            return defaultFlavor
        }
    }
    return defaultFlavor
}

// 为所有子项目添加公共代码
//gradle.beforeProject { project ->
//    println 'apply plugin java for ' + project
//    project.apply plugin: 'java'
//}

// equals to
//allprojects {
//    beforeEvaluate { project ->
//        println 'apply plugin java for ' + project
//        project.apply plugin: 'java'
//    }
//}